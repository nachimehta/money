<?xml version="1.0" encoding="UTF-8"?>
<project name="Money" default="build" basedir=".">
  <target name="nightly" depends="prepare, prepare-nightly, lint, phploc-ci, pdepend, phpmd-ci, phpcs-ci, phpcpd-ci, phpunit, phpdcd, phpmetrics, phpdox"/>
  <target name="build" depends="prepare, prepare-last-rev, modified-files, lint, succeed-rev "/>
  <target name="dev" depends="lint, phpmd, phpcs, phpcpd, phpdcd, phpunit" />

  <property name="basedir" value="${project.basedir}" />

  <property name="config" value="${basedir}/build" />
  <property name="source" value="${basedir}/src" />
  <property name="tests" value="${basedir}/tests" />
  <property name="tools" value="${config}/tools" />


  <target name="prepare-last-rev" description="Makes sure a last git ref hash is present.">
    <if>
      <not>
        <available file="${config}/.lastSuccess.txt" type="file" />
      </not>
      <then>
        <phingcall target="store-current-rev" >
        </phingcall>
      </then>
    </if>
  </target>

  <target name="modified-files" description="Get list of modified files since last successfull build">
    <loadfile property="lastSuccess" srcFile="${config}/.lastSuccess.txt" />
    <exec command="git diff --name-only ${lastSuccess} HEAD | grep \.php$"
      outputProperty="fetchFiles" />
    <exec command="tr '\n' ',' | sed 's/.$..'"  outputProperty="commaSeparatedFiles"/>
    <exec command="tr '\n' '' "  outputProperty="spacedFiles"/>

  </target>

  <target name="succeed-rev"
    depends="phpunit, phpmd-files, phpcs-files, phpcpd-files"
    description="Updates the lastSucced git ref hash whenever there is a successfull build">
    <phingcall target="store-current-rev" >
    </phingcall>
  </target>

  <target name="store-current-rev" description="Stores the current git HEAD ref hash">
    <exec command="git rev-parse HEAD" outputProperty="headRef" />
    <echo file="${config}/.lastSuccess.txt" append="false" msg="${headRef}" />
  </target>

  <target name="clean-nightly"
      description="Clean up build artifacts">
      <delete dir="${config}/api" />
      <delete dir="${config}/code-browser" />
      <delete dir="${config}/pdepend" />
      <delete dir="${config}/phpmetrics" />
  </target>

  <target name="prepare-nightly"
      depends="clean-nightly"
      description="Prepare for build">
      <mkdir dir="${config}/api" />
      <mkdir dir="${config}/code-browser" />
      <mkdir dir="${config}/pdepend" />
      <mkdir dir="${config}/phpmetrics" />
  </target>

  <target name="clean"
      description="Clean up build artifacts">
      <delete dir="${config}/coverage" />
      <delete dir="${config}/logs" />
  </target>

  <target name="prepare"
      depends="clean"
      description="Prepare for build">
      <mkdir dir="${config}/coverage" />
      <mkdir dir="${config}/logs" />
  </target>


  <target name="generate-code"
    description="Generate Currency-specific subclasses of Money and autoloader code">
    <exec logoutput="true"
          command="${config}/generate-child-classes.php" />
    <exec logoutput="true"
          command="${tools}/phpab.phar --output ${source}/autoload.php ${source}" />
  </target>

  <target name="lint"
    description="Perform syntax check of sourcecode files">
      <phplint level="info" cachefile="${config}/.lintCache.txt">
          <fileset dir="${source}">
              <include name="**/*.php" />
          </fileset>
          <fileset dir="${tests}">
              <include name="**/*.php" />
          </fileset>
      </phplint>
  </target>

  <target name="phploc-ci"
      description="Measure project size using PHPLOC">
      <exec logoutput="true"
          command="${tools}/phploc.phar --count-tests --log-csv ${config}/logs/phploc.csv --log-xml ${config}/logs/phploc.xml ${source} ${tests}" />
  </target>

    <target name="pdepend"
        description="Calculate software metrics using PHP_Depend">
        <exec logoutput="true"
            command="${tools}/pdepend.phar --jdepend-xml=${config}/logs/jdepend.xml --jdepend-chart=${config}/pdepend/dependencies.svg --overview-pyramid=${config}/pdepend/overview-pyramid.svg ${source}" />
    </target>

    <target name="phpmd"
        description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec logoutput="true"
            command="${tools}/phpmd.phar ${source} text ${config}/phpmd.xml" />
    </target>

    <target name="phpmd-ci"
        description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec logoutput="true"
            command="${tools}/phpmd.phar ${source} xml ${config}/phpmd.xml --reportfile ${config}/logs/pmd.xml" />
    </target>

    <target name="phpmd-files"
        if="commaSeparatedFiles"
        description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec logoutput="true"
            checkreturn="true"
            command="${tools}/phpmd.phar ${commaSeparatedFiles} xml ${config}/phpmd.xml --reportfile ${config}/logs/pmd.xml" />
    </target>

    <target name="phpcs"
        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec logoutput="true"
        command="${tools}/phpcs.phar --standard=PSR2 --extensions=php --ignore=autoload.php ${source}" />
    </target>

    <target name="phpcs-ci"
        description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec logoutput="true"
            output="/dev/null"
            command="${tools}/phpcs.phar --report=checkstyle --report-file=${config}/logs/checkstyle.xml --standard=PSR2 --extensions=php --ignore=autoload.php ${source}" />
    </target>

    <target name="phpcs-files"
        if="spacedFiles"
        description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec logoutput="true"
            checkreturn="true"
            output="/dev/null"
            command="${tools}/phpcs.phar --report=checkstyle --report-file=${config}/logs/checkstyle.xml --standard=PSR2 --extensions=php --ignore=autoload.php ${spacedFiles}" />
    </target>

    <target name="phpcpd"
        description="Find duplicate code using PHPCPD">
        <exec logoutput="true"
            command="${tools}/phpcpd.phar -vvv ${source}" />
    </target>

    <target name="phpcpd-ci"
        description="Find duplicate code using PHPCPD">
        <exec logoutput="true"
            command="${tools}/phpcpd.phar --log-pmd ${config}/logs/pmd-cpd.xml ${source}" />
    </target>

    <target name="phpcpd-files"
        if="commaSeparatedFiles"
        description="Find duplicate code using PHPCPD">
        <exec logoutput="true"
            checkreturn="true"
            command="${tools}/phpcpd.phar --log-pmd ${config}/logs/pmd-cpd.xml --names=${commaSeparatedFiles}" />
    </target>

    <target name="phpunit"
        description="Run unit tests with PHPUnit">
        <exec logoutput="true" checkreturn="true"
            command="${tools}/phpunit.phar " />
    </target>

    <target name="phpdcd"
        description="Run PHPDeadCodeDetector">
        <exec logoutput="true"
            command="${tools}/phpdcd.phar -vvv ${source}" />
    </target>

    <target name="phpdcd-ci"
        description="Run PHPDeadCodeDetector">
        <exec logoutput="true"
            command="${tools}/phpdcd.phar ${source}" />
    </target>

    <target name="phpmetrics"
      description="Generates PHPMetrics">
      <exec logoutput="true"
        command="${tools}/phpmetrics.phar --report-html=build/phpmetrics/phpmetrics.html ${source}" />
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec logoutput="true"
          command="${tools}/phpdox.phar" />
    </target>

</project>

